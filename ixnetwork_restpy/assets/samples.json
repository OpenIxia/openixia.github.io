{
    "ixnetwork_restpy.samples.collect_logs.py": "\"\"\"Demonstrates collecting diagnostic logs \n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant, Files\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\nixnetwork.CollectLogs(Arg1=Files('diagnostic_logs'), Arg2='currentInstance')\nsession_assistant.Session.DownloadFile('diagnostic_logs.zip')\n",
    "ixnetwork_restpy.samples.getting_started.py": "\"\"\"This script demonstrates how to get started with ixnetwork_restpy scripting.\n\nThe script demonstrates the following:\n    - connect to an IxNetwork test platform, authenticate, add a new session and clear the config\n    - create 1 tx port and 1 rx port\n    - create traffic from the tx port to the rx port\n    - start traffic\n    - print statistics\n    - stop traffic\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# create tx and rx port resources\nport_map = session_assistant.PortMapAssistant()\nport_map.Map('10.36.74.26', 2, 13, Name='Tx')\nport_map.Map('10.36.74.26', 2, 14, Name='Rx')\n\n# create a TrafficItem resource\n# TrafficItem acts a a high level container for ConfigElement resources\n# ConfigElement is a high level container for individual HighLevelStream resources\ntraffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Traffic Test', TrafficType='raw')\ntraffic_item.EndpointSet.add(\n    Sources=ixnetwork.Vport.find(Name='^Tx').Protocols.find(), \n    Destinations=ixnetwork.Vport.find(Name='^Rx').Protocols.find())\n\n# using the traffic ConfigElement resource\n# update the frame rate\n# update the transmission control\ntraffic_config = traffic_item.ConfigElement.find()\ntraffic_config.FrameRate.update(Type='percentLineRate', Rate='100')\ntraffic_config.TransmissionControl.update(Type='continuous')\n\n# adjust Ethernet stack fields\ndestination_mac = traffic_config.Stack.find(StackTypeId='ethernet').Field.find(FieldTypeId='ethernet.header.destinationAddress')\ndestination_mac.update(ValueType='valueList', ValueList=['00:00:fa:ce:fa:ce', '00:00:de:ad:be:ef'], TrackingEnabled=True)\n\n# push ConfigElement settings down to HighLevelStream resources\ntraffic_item.Generate()\n\n# connect ports to hardware test ports\n# apply traffic to hardware\n# start traffic\nport_map.Connect(ForceOwnership=True)\nixnetwork.Traffic.Apply()\nixnetwork.Traffic.StartStatelessTrafficBlocking()\n\n# print statistics\nprint(session_assistant.StatViewAssistant('Port Statistics'))\nprint(session_assistant.StatViewAssistant('Traffic Item Statistics'))\nprint(session_assistant.StatViewAssistant('Flow Statistics'))\n\n# stop traffic\nixnetwork.Traffic.StopStatelessTrafficBlocking()\n",
    "ixnetwork_restpy.samples.internal_requests_access.py": "\"\"\"Demonstrates how to use the underlying requests connection\nto access an API that is not exposed in the python package \n\nBackground\n----------\nevery object has an internal _connection\nthe _connection has a .update .read .create .delete\nthose methods are raw requests access to the server so you need to \nuse API browser property names in the payload\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant, Files\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\npreferences = session_assistant.Ixnetwork.Globals.Preferences\nurl = '%s/debug/mw' % preferences.href\npayload = {\n    'debugLog': True,\n    'traceLevel': 'all'\n}\npreferences._connection._update(url, payload)\n",
    "ixnetwork_restpy.samples.iterators.py": "\"\"\"Demonstrates ixnetwork_restpy container object functionality.\n\nThe sample below shows how to retrieve all instances of a node from the server into a single container object\nEach instance can be accessed using the container object's iterator or index functionality\nThe container implements the following special method names to allow for iteration and indexing:\n    __len__, __getitem__, __iter__, __next__\n\nThe benefit of a container object is that a single method call can act on many instances without having to pass arrays of references.\nFor example if a container encapsulates 10 instances, the <container>.remove() method will delete all the encapsulated \ninstances without having to add looping code\n\nFor more information on containers read the following:  \n  https://docs.python.org/2.7/reference/datamodel.html#emulating-container-types\n  https://docs.python.org/2.7/library/stdtypes.html#typeiter\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# create x number of vports\nvport_count = 3\nfor i in range(vport_count):\n    ixnetwork.Vport.add()\n\n# get a container object with all instances\nvports = ixnetwork.Vport.find()\nassert(len(vports) == 3)\n\n# print the number of insances encapsulated in the container\nprint('%s instances' % len(vports))\n\n# print all instances in the container\nprint(vports)\n\n# print the first instance\nprint(vports[0].href)\n\n# print the last instance\nprint(vports[-1].href)\n\n# convert the container object into a list\nvport_list = list(vports)\nprint(len(vport_list))\n\n# remove all encapsulated instances in a single method call\nvports.remove()\n\n\n",
    "ixnetwork_restpy.samples.multivalues.py": "\"\"\"Demonstrates different types of patterns that can be set in\n\tTestPlatform.Sessions.IxNetwork.Topology...Multivalue objects\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# add virtual ports\nvports = ixnetwork.Vport.add().add().add().add()\nvports.info(vports)\n\n# add ipv4 devices\nipv4 = ixnetwork.Topology.add(Ports=vports).DeviceGroup.add(Multiplier=10).Ethernet.add().Ipv4.add()\n\n# set single multivalue\nipv4.Address.Single('6.6.6.6')\nipv4.info(ipv4.Address)\nassert(ipv4.Address.Pattern == '6.6.6.6')\n\n# add overlays\nipv4.Address.Overlay(3, '1.2.3.4')\nipv4.Address.Overlay(6, '4.3.2.1')\n\n# set increment multivalue\nipv4.Address.Increment(start_value='7.7.7.7', step_value='8.8.8.8')\nipv4.info(ipv4.Address)\nassert(ipv4.Address.Pattern.startswith('Inc:') is True)\n\n# set decrement multivalue\nipv4.Address.Decrement(start_value='6.6.6.6', step_value='5.5.5.5')\nipv4.info(ipv4.Address)\nassert(ipv4.Address.Pattern.startswith('Dec:') is True)\n\n# set custom multivalue\nipv4.Address.Custom(start_value='6.6.6.6', step_value='5.5.5.5', increments=[('3.3.3.3', 12, [('2.2.2.2', 20, [])])])\nipv4.info(ipv4.Address)\nassert(ipv4.Address.Pattern.startswith('Custom:') is True)\n\n# set valuelist multivalue\nipv4.Address.ValueList(['10.10.10.10', '11.11.11.11'])\nipv4.info(ipv4.Address)\nassert(ipv4.Address.Pattern.startswith('List:') is True)\n\n# set random multivalue\nipv4.Address.Random()\nipv4.info(ipv4.Address)\nassert(ipv4.Address.Pattern.startswith('Rand') is True)\n\n# set repeatable random range multivalue\nipv4.Address.RandomRange(min_value='1.1.1.1', max_value='2.2.2.2', step_value='0.0.0.1', seed=7)\nipv4.info(ipv4.Address)\nassert(ipv4.Address.Pattern.startswith('Randr:') is True)\n\n# set repeatable random multivalue\nipv4.Address.RandomMask(fixed_value='1.1.1.1', mask_value='0.0.0.1', seed=7, count=6)\nipv4.info(ipv4.Address)\nassert(ipv4.Address.Pattern.startswith('Randb:') is True)\n",
    "ixnetwork_restpy.samples.ngpf_device_ids.py": "\"\"\"Demonstrates some best practices for specifying device ids when executing ngpf operations\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# create a b2b ngpf scenario\nvport_1 = ixnetwork.Vport.add().add().add()\nprint(vport_1)\nvport_2 = ixnetwork.Vport.add()\ntopologies = ixnetwork.Topology.add(Vports=vport_1).add(Vports=vport_2)\nipv4_1 = topologies[0].DeviceGroup.add().Ethernet.add().Ipv4.add()\nigmp_host = ipv4_1.IgmpHost.add()\nipv4_2 = topologies[1].DeviceGroup.add().Ethernet.add().Ipv4.add()\nigmp_querier = ipv4_2.IgmpQuerier.add()\n\n# set the port step on the address\naddress = ipv4_1.Address\nprint(address.Steps)\naddress.Steps.Step = '1.1.1.1'\nassert(address.Steps.Step == '1.1.1.1')\n\n# get device ids for two specific ip addresses\nipv4_device_ids = ipv4_1.get_device_ids(Address='^(%s|%s)' % (ipv4_1.Address.Values[6], ipv4_1.Address.Values[24]))\nassert(len(ipv4_device_ids) == 2)\n\n# get device ids on two specific ports\nport_device_ids = ipv4_1.get_device_ids(PortNames='^(%s|%s)$' % (vport_1[0].Name, vport_1[2].Name))\nassert(len(port_device_ids) == 20)\n\n# get device ids for igmp v2 hosts on a specific port\nv2_device_ids = igmp_host.get_device_ids(PortNames='(?i)^%s$' % (vport_1[1].Name), VersionType='(?i)version2')\nassert(len(v2_device_ids) == 10)\n\n# stop all devices\nipv4_1.Stop()\n\n# start only a few devices\nipv4_1.Start(ipv4_device_ids)\n\n# leave\nigmp_host.IgmpMcastIPv4GroupList.IgmpLeaveGroup(\"1-4;6\")\n\n# issue a join on only a few devices\nigmp_host.IgmpMcastIPv4GroupList.Join(v2_device_ids)\n\n\n\n\n",
    "ixnetwork_restpy.samples.ngpf_ipv4.py": "\"\"\"Demonstrates adding ipv4 devices\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin', \n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\n\nipv4 = session_assistant.Ixnetwork \\\n\t.Topology.add() \\\n\t.DeviceGroup.add() \\\n\t.Ethernet.add() \\\n\t.Ipv4.add()\nprint(ipv4)\n",
    "ixnetwork_restpy.samples.object_from_obj_ref.py": "\"\"\"Demonstrates how to get an object given an href\n\nThe TestPlatform.Sessions class has a helper method that assists in returning an object given a valid href\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\n# create a test tool session\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin', \n    LogLevel=SessionAssistant.LOGLEVEL_INFO,\n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\nvport = ixnetwork.Vport.add()\n\n# the following code is an attempt to get the object that the vport is connected to\n# in this case the href that is returned from the .ConnectedTo property is null so the object returned is None\n# if the vport was connected to an actual hardware port a valid /availableHardware/chassis/card/port object reference \n# would be returned from the Vport.ConnectedTo property\n# this reference is then used to get an actual object\nhardware_port = session_assistant.Session.GetObjectFromHref(vport.ConnectedTo)\nassert(hardware_port is None)",
    "ixnetwork_restpy.samples.resource_manager.py": "\"\"\"Demonstrates some best practices for using resource manager to import and export the configuration as json\n\n\"\"\"\n\nimport json\nfrom ixnetwork_restpy import SessionAssistant, Files\n\n\n# create a test tool session\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin', \n    LogLevel=SessionAssistant.LOGLEVEL_INFO,\n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# create a configuration fragment of two virtual ports\nvports = [\n    {\n        'xpath': '/vport[1]',\n        'name': 'vport 1'\n    },\n    {\n        'xpath': '/vport[2]',\n        'name': 'vport 2'\n    }\n]\n\n# import the configuration fragment as a string\nixnetwork.ResourceManager.ImportConfig(json.dumps(vports), True)\nassert(len(ixnetwork.Vport.find()) == 2)\n\n# export the entire configuration as a string\nconfig = ixnetwork.ResourceManager.ExportConfig(['/descendant-or-self::*'], False, 'json')\n\n# import the entire configuration as a string\nixnetwork.ResourceManager.ImportConfig(config, True)\nassert(len(ixnetwork.Vport.find()) == 2)\n\n# export the entire configuration as a file\nixnetwork.ResourceManager.ExportConfigFile(['/descendant-or-self::*'], False, 'json', Files('two_vports.json'))\n\n# import then entire configuration from a file\nixnetwork.ResourceManager.ImportConfigFile(Files('two_vports.json'), True)\nassert(len(ixnetwork.Vport.find()) == 2)\n",
    "ixnetwork_restpy.samples.restapi_logging.py": "\"\"\"The following demonstrates the logging features of this package\n\nThe different trace options are meant to expose the details of the request and response messages. \nThe default output is to sys.stdout\nTo output to a log file, use the log_file_name param\nThe trace level can be specified in the SessionAssistant constructor and subsequently modified using the TestPlatform.Trace property.\nThe default log level is SessionAssistant.LOGLEVEL_NONE which has a logging level of CRITICAL\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant, TestPlatform\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin', \n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\ntest_platform = session_assistant.TestPlatform\nixnetwork = session_assistant.Ixnetwork\n\n# warn level messages logged\ntest_platform.Trace = TestPlatform.TRACE_WARNING\ntest_platform.warn('warn message')\n\n# info level messages logged\ntest_platform.Trace = TestPlatform.TRACE_INFO\ntest_platform.info('info message')\n\n# debug level messages showing only request\ntest_platform.Trace = TestPlatform.TRACE_REQUEST\nixnetwork.Vport.add()\n\n# debug level messages showing request and response truncated\ntest_platform.Trace = TestPlatform.TRACE_REQUEST_RESPONSE\nixnetwork.Vport.add()\n\n# debug level messages showing entire request and response\ntest_platform.Trace = TestPlatform.TRACE_ALL\nixnetwork.Vport.add()\n\n# turn logging off\ntest_platform.Trace = TestPlatform.TRACE_NONE\ntest_platform.warn('warn message')\ntest_platform.info('info message')\nixnetwork.Vport.add()\n\n",
    "ixnetwork_restpy.samples.assistants.port_map_assistant.py": "\"\"\"Demonstrates how to use the PortMapAssistant class\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# demonstrate different ways to add mappings between test port locations and vport names\n# if the vport name does not exist a new vport using that name will be created and mapped\n# if the vport name is None then a new vport will be created using the system's default naming scheme and mapped\nport_map = session_assistant.PortMapAssistant()\nport_map.Map(Location='10.36.74.26;2;11', Name='Port 1')\nport_map.Map('10.36.74.26', 2, 12, Name='Port 2')\nport_map.Map(IpAddress='10.36.74.26', CardId=2, PortId=13, Name='Port 3')\nport_map.Map(Port=('10.36.74.26', 2, 14), Name='Port 4')\nprint(port_map)\n\n# using the map connect test port locations and vports\nport_map.Connect(ForceOwnership=True, HostReadyTimeout=20, LinkUpTimeout=60)\nprint(port_map)\n\n# using the map disconnect test port locations and vports\nport_map.Disconnect()\nprint(port_map)\n",
    "ixnetwork_restpy.samples.assistants.stat_view_assistant.py": "\"\"\"Demonstrates how to use the StatViewAssist class\n\nThis sample requires an already loaded configuration with at least 2 connected vports.\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant, StatViewAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=False)\nixnetwork = session_assistant.Ixnetwork\n\nixnetwork.info('negative test')\ntry:\n    session_assistant.StatViewAssistant('my test view', Timeout=5)\nexcept Exception as e:\n    ixnetwork.info(e)\n\n# get a list of all current statistic views that can be used in the StatViewAssistant\nprint(StatViewAssistant.GetViewNames(ixnetwork))\n\n# create a stat view assistant for a statistics view\nport_statistics = session_assistant.StatViewAssistant('Port Statistics')\n\n# print all the rows for a statistics view\nprint(port_statistics)\n\n# add a filter so that only a single row is retrieved\nport_statistics.AddRowFilter('Port Name', StatViewAssistant.REGEX, 'Port 1$')\nprint(port_statistics)\n\n# demonstrate cell access\nport_statistics.ClearRowFilters()\nrows = port_statistics.Rows\n\n# get the cell value at row 0, column 'Port Name'\nprint(rows[0]['Port Name'])\n\n# get the cell value at row 1, column 'Stat Name'\nprint(rows[1]['Stat Name'])\n\n# get the cell value at the first row that matches a regex of 'case insensitive endswith port 1', column 'Frames Tx.'\nprint(rows['(?i)port 1$']['Frames Tx.'])\n\nixnetwork.info('check that all ipv4 protocols are up')\nprotocols_summary = session_assistant.StatViewAssistant('Protocols Summary')\nprotocols_summary.AddRowFilter('Protocol Type', StatViewAssistant.REGEX, '(?i)^ipv4?')\nprotocols_summary.CheckCondition('Sessions Not Started', StatViewAssistant.EQUAL, 0)\nprotocols_summary.CheckCondition('Sessions Down', StatViewAssistant.EQUAL, 0)\n\nixnetwork.info('traffic stat check')\ntraffic_statistics = session_assistant.StatViewAssistant('Traffic Item Statistics')\ntx_frames = traffic_statistics.Rows[0]['Tx Frames']\nixnetwork.info('tx frames: %s' % tx_frames)\n\nixnetwork.info('drilldown sample')\nixnetwork.info(traffic_statistics.DrillDownOptions())\nixnetwork.info(traffic_statistics.TargetRowFilters())\ndrilldown = traffic_statistics.Drilldown(0, traffic_statistics.DrillDownOptions()[0], traffic_statistics.TargetRowFilters()[0])\nprint(drilldown)\n",
    "ixnetwork_restpy.samples.classic.classic_bgp.py": "\"\"\"Demonstrates adding a bgp neighbor range to a virtual port.\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# add a virtual port and get the interface object\nvport = ixnetwork.Vport.add(Name='Test Port 1')\n\n# add an interface\ninterface = vport.Interface.add(Enabled=True)\nipv4 = interface.Ipv4.add(Ip='1.1.1.1', Gateway='1.1.2.1')\n\n# enable bgp\nbgp = vport.Protocols.find().Bgp\nbgp.Enabled = True\n\n# add a bgp neighbor range\nneighbor_range = bgp.NeighborRange.add(Interfaces=interface, Enabled=True, EnableBgpId=True)\n\n# verify the neighbor range has been added on the server\nassert(len(neighbor_range.find()) == 1)\n",
    "ixnetwork_restpy.samples.classic.classic_interfaces.py": "\"\"\"Demonstrates adding interfaces to virtual ports.\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# add a virtual port and get the interface object\ninterfaces = ixnetwork.Vport.add(Name='Test Port 1').Interface\n\n# add 10 interfaces\nfor i in range(1, 11):\n\tinterfaces.add(Description='Interface Demo %s' % i, Enabled=True)\n\n# verify they have been added on the server\nassert(len(interfaces.find()) == 10)\n",
    "ixnetwork_restpy.samples.files.file_transfer.py": "\"\"\"Demonstrates how to upload and download files to a remote server.\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant, Files\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# add 4 vport objects\nixnetwork.Vport.add().add().add().add()\n\n# save the configuration on the server\nixnetwork.SaveConfig(Files('sample.ixncfg'))\n\n# get a list of remote files\nprint(session_assistant.Session.GetFileList())\n\n# download the remote saved configuration as some other local file\nsession_assistant.Session.DownloadFile('sample.ixncfg', 'local.ixncfg')\n\n# upload the local file\nprint(session_assistant.Session.UploadFile('local.ixncfg'))\n\n# load the remote local configuration\nprint(ixnetwork.LoadConfig(Files('local.ixncfg')))\n\n# verify that the vport objects exist\nassert(len(ixnetwork.Vport.find()) == 4)\n\n\n",
    "ixnetwork_restpy.samples.files.save_load_config.py": "\"\"\"Demonstrates file handling.\n\nThe Files object determines how file content is uploaded.\nPrior to an operation if local_file=True is specified the content will be pushed to the server \nif the content exists locally.\nIf the file does not exist locally an empty file using only the file name will be created on the server. \n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant, Files\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# add 4 vport objects\nixnetwork.Vport.add().add().add().add()\n\n# save the configuration on the server\nixnetwork.SaveConfig(Files('sample.ixncfg'))\n\n# create an empty configuration\nixnetwork.NewConfig()\nassert(len(ixnetwork.Vport.find()) == 0)\n\n# load the saved configuration\nixnetwork.LoadConfig(Files('sample.ixncfg'))\n\n# verify that the vport objects exist\nassert(len(ixnetwork.Vport.find()) == 4)\n\n\n",
    "ixnetwork_restpy.samples.ports.assign_ports.py": "\"\"\"Demonstrates the best practice for connecting vport(s) to hardware test ports.\n\nAssignPorts is currently the optimal method for connecting hardware test ports to vport(s).\n\nThe AssignPorts method on the test platform does the following:\n\t- adds chassis to /availableHardware using Arg1\n\t- creates abstract ports if the abstract port list (Arg3) cannot meet the number of Arg1 test ports\n\t- clears ownership of test ports if Arg4 is True\n\t- waits until port statistic view for all test ports are ready\n\t- returns a list of abstract test ports that have not been connected to test ports\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# setup test ports and virtual ports\nchassis_ip = '10.36.74.26'\ntest_ports = [\n\tdict(Arg1=chassis_ip, Arg2=2, Arg3=13),\n\tdict(Arg1=chassis_ip, Arg2=2, Arg3=14)\n]\nvirtual_ports = ixnetwork.Vport.add().add()\n\nconnected_ports = ixnetwork.AssignPorts(test_ports, [], virtual_ports, True)\n\n",
    "ixnetwork_restpy.samples.ports.clear_ownership.py": "\"\"\"Demonstrates an approach for clearing ownership on vports that are connected \nby using the Vport.ConnectedTo reference and obtaining the Port object which has the ClearOwnership method\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# add a chassis\nchassis = ixnetwork.AvailableHardware.Chassis.add(Hostname='10.36.74.17')\n\n# add abstract ports and connect them to chassis ports\ncard = chassis.Card.find(CardId=1)\nfor port in card.Port.find():\n\tixnetwork.Vport.add(ConnectedTo=port)\n\n# clear the ownership on the port using a reference returned by the Vport.ConnectedTo property\nfor vport in ixnetwork.Vport.find():\n\tport = session_assistant.Session.GetObjectFromHref(vport.ConnectedTo)\n\tif port is not None:\n\t\tport.ClearOwnership()\n\n\n",
    "ixnetwork_restpy.samples.protocols.ospf.py": "\"\"\"Demonstrates creating ospfv2 devices \n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\ndg = ixnetwork \\\n    .Topology.add(Vports=ixnetwork.Vport.add()) \\\n    .DeviceGroup.add(Name='Dg West')\nospf1 = dg.Ethernet.add() \\\n    .Ipv4.add(Name='Ipv4 West') \\\n    .Ospfv2.add()\ndg.NetworkGroup.add(Multiplier=20) \\\n    .Ipv4PrefixPools.add()\n\nospf2 = ixnetwork \\\n    .Topology.add(Vports=ixnetwork.Vport.add()) \\\n    .DeviceGroup.add(Name='Dg East') \\\n    .Ethernet.add() \\\n    .Ipv4.add(Name='Ipv4 East') \\\n    .Ospfv2.add()",
    "ixnetwork_restpy.samples.protocols.tlvprofile.py": "\"\"\"Demonstrates creating and copying over tlv templates into a tlv profile\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession = SessionAssistant('127.0.0.1', LogLevel=SessionAssistant.LOGLEVEL_INFO, ClearConfig=True)\nixnetwork = session.Ixnetwork\n\n# create a custom tlv template\ngeneric_tlv = ixnetwork.Globals.Topology.Dhcpv6client \\\n    .TlvEditor.find() \\\n    .Template.add(Name='generic') \\\n    .Tlv.add(Name='generic')\ngeneric_tlv.Type.update(Name='type').Object.add(Name='type').Field.add(Name='type').Value.Single('10')\ngeneric_tlv.Length.update(Name='length').Value.Single('11')\ngeneric_tlv.Value.update(Name='value').Object.add(Name='value').Field.add(Name='value').Value.Single('12')\nixnetwork.info(generic_tlv)\n\n# get a default tlv template\noption_request = ixnetwork.Globals.Topology.Dhcpv6client \\\n    .TlvEditor.find() \\\n    .Defaults.find() \\\n    .Template.find() \\\n    .Tlv.find(Name='Option Request')\nixnetwork.info(option_request)\n\n# get the dhcpv6client tlv profile\ntlv_profile = ixnetwork.Topology.add() \\\n    .DeviceGroup.add() \\\n    .Ethernet.add() \\\n    .Dhcpv6client.add() \\\n    .TlvProfile.find()\nixnetwork.info(tlv_profile)\n\n# copy tlv templates into the dhcpv6client tlv profile\ngeneric_tlv = ixnetwork.parent.GetObjectFromHref(tlv_profile.CopyTlv(generic_tlv))\noption_request = ixnetwork.parent.GetObjectFromHref(tlv_profile.CopyTlv(option_request))\n\n# print option request tlv sub options\nfor sub_option in option_request.Value.Object.find().Field.find():\n    ixnetwork.info(sub_option)\n\n",
    "ixnetwork_restpy.samples.quicktests.rfc2544back2back.py": "\"\"\"Demonstrates creating ospfv2 devices \n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant( \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\nipv41 = ixnetwork \\\n    .Topology.add(Vports=ixnetwork.Vport.add()) \\\n    .DeviceGroup.add(Name='Dg West') \\\n    .Ethernet.add() \\\n    .Ipv4.add(Name='Ipv4 West')\n\nipv42 = ixnetwork \\\n    .Topology.add(Vports=ixnetwork.Vport.add()) \\\n    .DeviceGroup.add(Name='Dg East') \\\n    .Ethernet.add() \\\n    .Ipv4.add(Name='Ipv4 East')\n\ntraffic = ixnetwork.Traffic.TrafficItem.add(Name='West -> East', TrafficType='ipv4')\ntraffic.EndpointSet.add(Sources=ipv41, Destinations=ipv42)\n\ntest_details = ixnetwork.Timeline.CreateTest(Arg2='rfc2544back2back', Arg3=None)\nprint(test_details)\ntest = ixnetwork.parent.GetObjectFromHref(test_details['arg1'])\ntest.TrafficItemIds = traffic\n\n",
    "ixnetwork_restpy.samples.sessions.connection_manager.py": "\"\"\" Demonstrates IxNetwork Connection Manager session management\n\"\"\"\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n\n# setup the connection information for a connection manager test platform \ntest_platform=TestPlatform('10.113.9.116', rest_port=443, platform='connection_manager')\ntest_platform.Trace = 'request_response'\n\n# get a list of sessions\nfor session in test_platform.Sessions.find():\n    print(session)\n\n# add a session and remove the session\nsessions = test_platform.Sessions.add()\nassert(len(sessions) == 1)\nprint(sessions)\nsessions.remove()\n\n# get an invalid session\nsessions = test_platform.Sessions.find(Id=6)\nassert(len(sessions) == 0)\n\n# get a valid session, start it and remove it when finished\n# use the state to determine if it can be stopped\nsessions = test_platform.Sessions.find(Id=8022)\nassert(len(sessions) == 1)\nif sessions.State == 'STOPPED':\n    sessions.Start()\n    sessions.remove()\n",
    "ixnetwork_restpy.samples.sessions.linux_sessions.py": "\"\"\" Demonstrates IxNetwork Linux API Server session management\n\"\"\"\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n\n# setup the connection information for a windows gui test platform that has a default session of 1\n# platform='linux' forces the scheme to https\n# if the default platform='windows' is used a ConnectionError will be raised\n# as the Linux API Server does not redirect but closes the connection\ntest_platform=TestPlatform('10.36.82.185')\nassert(test_platform.Platform == 'linux')\ntest_platform.Trace = 'request_response'\n\n# authenticate with username and password\ntest_platform.Authenticate('admin', 'admin')\napi_key = test_platform.ApiKey\n\n# if username/password is not acceptable to the client due to the unencrypted password\n# an api key can be specified instead\n# the api key can be retrieved from the linux api server user settings and provided \n# to the TestPlatform.ApiKey property which will be used in subsequent server requests\ntest_platform.ApiKey = api_key\n\n# get a list of sessions\nfor session in test_platform.Sessions.find():\n    print(session)\n\n# add a session\nsessions = test_platform.Sessions.add(ApplicationType='ixnrest')\nsession_id = sessions.Id\nprint(sessions)\n\n# change the name of a session\nsession_name = 'new session name'\nsessions.Name = session_name\nassert(sessions.Name == session_name)\nprint(sessions)\n\n# find by session name\nsessions = test_platform.Sessions.find(Name=session_name)\nassert(len(sessions) == 1)\n\n# remove the session\nsessions.remove()\nassert (len(sessions) == 0)\n\n# attempt to get the removed session\nsessions = test_platform.Sessions.find(session_id)\nassert(len(sessions) == 0)\n",
    "ixnetwork_restpy.samples.sessions.quicktest.py": "\"\"\" Demonstrates how to create a Linux API Server QuickTest Web session\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\n# create a linux api server quicktest session\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    ApplicationType=SessionAssistant.APP_TYPE_QUICKTEST,\n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nprint(session_assistant.Session)\nsession_assistant.Session.remove()\n\n# create a linux api server ixnetwork session\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    ApplicationType=SessionAssistant.APP_TYPE_IXNETWORK,\n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nprint(session_assistant.Session)\nsession_assistant.Session.remove()\n",
    "ixnetwork_restpy.samples.sessions.windows_sessions.py": "\"\"\" Demonstrates standalone IxNetwork Windows GUI session management\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\ntest_platform = session_assistant.TestPlatform\n\n# get a list of sessions\nfor session in test_platform.Sessions.find():\n\tprint(session)\n\n# add a session and remove the session\nsessions = test_platform.Sessions.add()\nassert(len(sessions) == 1)\nprint(sessions)\nsessions.remove()\n\n# get an invalid session\nsessions = test_platform.Sessions.find(Id=6)\nassert(len(sessions) == 0)\n\n# get a valid session\nsessions = test_platform.Sessions.find(Id=1)\nassert(len(sessions) == 1)",
    "ixnetwork_restpy.samples.statistics.csv_logging.py": "\"\"\" Sample that demonstrates how to enable CSV logging for a view\nand download the resulting CSV log file once it is disabled.\n\nThe sample operates under the following assumptions:\n    - it is for an established IxNetwork GUI session\n    - traffic is running\n    - there is a Port Statistics view\n\n\"\"\"\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# assumes that the view exists and it sets up csv logging for the view\nview = ixnetwork.Statistics.View.find(Caption='Port Statistics')\nview.update(EnableCsvLogging=True)\n\n# this builds the full path of the csv file on the server\nremote_csv_filename = '%s/%s' % (ixnetwork.Statistics.CsvFilePath, view.CsvFileName)\n\n# setup a local path\nlocal_csv_filename = 'c:/temp/%s' % view.CsvFileName\n\n# in order to download the csv log file the csv logging must be disabled \n# otherwise a sharing violation from the server will be returned\nixnetwork.Statistics.EnableCsvLogging = False\nsessions.DownloadFile(remote_csv_filename, local_csv_filename)\n",
    "ixnetwork_restpy.samples.statistics.csv_snapshot.py": "\"\"\" Sample that demonstrates how to take a CSV snapshot of a statistics view\n\nThe sample operates under the following assumptions:\n    - it is for an established IxNetwork GUI session\n    - traffic is running\n    - there is a Flow Statistics view\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\nimport os\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO)\nixnetwork = session_assistant.Ixnetwork\nsession = session_assistant.Session\n\nixnetwork.info('''\n1) setup the csv snapshot parameters\n2) ensure the CsvName DOES NOT end with a .csv extension\n\tthe IxNetwork server will add a .csv extension to the final csv filename\n3) ensure the CsvLocation is a path on the IxNetwork server that the IxNetwork server has access to, \n\tthe best practice is to use the Ixnetwork.Statistics.CsvFilePath location\n''')\nstatistics = ixnetwork.Statistics\ncsvsnapshot = statistics.CsvSnapshot\ncsvsnapshot.update(CsvName=\"StatisticsSnapshot\",\n\tCsvLocation=statistics.CsvFilePath,\n    SnapshotViewCsvGenerationMode='overwriteCSVFile',\n    SnapshotViewContents='allPages',\n    Views=statistics.View.find(Caption='Port Statistics'))\n\nixnetwork.info(csvsnapshot)\n\nixnetwork.info('''\n4) take the csv snapshot\n''')\ncsvsnapshot.TakeCsvSnapshot()\n\nixnetwork.info('''\n5) the csv snapshot file is on the IxNetwork server and can be downloaded\n\tThe csv snapshot file name is the CsvLocation and CsvName and .csv extension\n    The snapshot API will always add a .csv extension\n''')\nfile_name = csvsnapshot.CsvName + '.csv'\nremote_filename = os.path.normpath(os.path.join(csvsnapshot.CsvLocation, file_name))\nlocal_filename = os.path.normpath(os.path.join('c:/temp', file_name))\nsession.DownloadFile(remote_filename, local_filename)\n\nwith open(local_filename, 'r') as fid:\n    print(fid.read())\n\n",
    "ixnetwork_restpy.samples.statistics.drill_down.py": "\"\"\"Demonstrates drilling down on an already established statistics view.\nThis sample requires a running ixnetwork instance that has traffic being transmitted.\n\"\"\"\n\nfrom time import sleep\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# get the view you want to drill down on\ncaption = 'Traffic Item Statistics'\nview = ixnetwork.Statistics.View.find(Caption=caption)\nassert(len(view) == 1)\n\n# get the drill down node for the view\ndrill_down = view.DrillDown.find()\n\n# prior to getting the drill down options the target row index must be set\n# the target row index is the 0 based index of the row that you are interested in drilling down into\ndrill_down.TargetRowIndex = 0\n\n# print the drill down options for the view\n# drill down options are dynamic and are based on tracking options selected during traffic item creation\nfor drill_down_option in drill_down.AvailableDrillDownOptions:\n\tprint(drill_down_option)\ndrill_down.TargetDrillDownOption = drill_down.AvailableDrillDownOptions[1]\nfor drill_down_filter in drill_down.AvailableTargetRowFilters:\n\tprint(drill_down_filter)\nif len(drill_down.AvailableTargetRowFilters) > 0:\n\tdrill_down.TargetRowFilter = drill_down.AvailableTargetRowFilters[0]\n\n# perform the drill down operation\ndrill_down.DoDrillDown()\n\n# the drill down operation populates the read only 'User Defined Statistics' view\n# get the resulting drill down view\nuser_defined_statistics = ixnetwork.Statistics.View.find(Caption='User Defined Statistics')\n\n# wait for data to become available\nattempts = 0\nwhile user_defined_statistics.Data.IsReady is False and attempts < 10:\n    sleep(1)\n    attempts += 1\n\n# print the column headers\nprint(' '.join(user_defined_statistics.Data.ColumnCaptions))\n\n# print the ingress and egress rows\nfor ingress_egress_rows in user_defined_statistics.Data.PageValues:\n    for row in ingress_egress_rows:\n        print(' '.join(row))",
    "ixnetwork_restpy.samples.statistics.traffic_flow.py": "\"\"\"Demonstrates creating a custom traffic flow statistics view\nThis sample requires a running ixnetwork instance that has traffic being transmitted.\nIt uses all possible port filters, traffic item filters and tracking filters when creating the view.\nIt enables all possible statistics.\nThe last step prior to getting data should be to enable the view.\n\"\"\"\n\nfrom time import sleep\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n\n# remove the view if it already exists\ncaption = 'Custom Traffic Flow View'\nview = ixnetwork.Statistics.View.find(Caption=caption)\nif len(view) == 1:\n    view.remove()\n\n# create the view\nview = ixnetwork.Statistics.View.add(Caption=caption, Type='layer23TrafficFlow', Visible=True)\n\n# set filters\ntraffic_flow_filter = view.Layer23TrafficFlowFilter.find()\ntraffic_flow_filter.PortFilterIds = view.AvailablePortFilter.find()\ntraffic_flow_filter.TrafficItemFilterIds = view.AvailableTrafficItemFilter.find()\nfor tracking_filter in view.AvailableTrackingFilter.find():\n    traffic_flow_filter.EnumerationFilter.add(SortDirection='ascending', TrackingFilterId=tracking_filter)\n\n# enable statistics\nfor statistic in view.Statistic.find():\n    statistic.Enabled = True\n\n# enable the view\nview.Enabled = True\n\n# wait for data to become available\nattempts = 0\nwhile view.Data.IsReady is False and attempts < 10:\n    sleep(1)\n    attempts += 1\n\n# print the column headers\nprint(' '.join(view.Data.ColumnCaptions))\n\n# print the ingress and egress rows\nfor ingress_egress_rows in view.Data.PageValues:\n    for row in ingress_egress_rows:\n        print(' '.join(row))\n",
    "ixnetwork_restpy.samples.traffic.traffic_custom_stack.py": "\"\"\"This sample demonstrates customizing a traffic item stack.\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# create two vport objects\nvport_1 = ixnetwork.Vport.add()\nvport_2 = ixnetwork.Vport.add()\n\n# create a raw traffic item\ntraffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Raw Traffic Item Sample', TrafficType='raw', TrafficItemType='l2L3')\nendpoint_set = traffic_item.EndpointSet.add(Sources=vport_1.Protocols.find(), Destinations=vport_2.Protocols.find())\n\n# append protocol templates to the traffic item\nconfig_element = traffic_item.ConfigElement.find(EndpointSetId=1)\nethernet_stack = config_element.Stack.find(StackTypeId='^ethernet$')\n\n# get the protocol templates to be appended\nvlan_protocol_template = ixnetwork.Traffic.ProtocolTemplate.find(StackTypeId='^vlan$')\nipv4_protocol_template = ixnetwork.Traffic.ProtocolTemplate.find(StackTypeId='^ipv4$')\nudp_protocol_template = ixnetwork.Traffic.ProtocolTemplate.find(StackTypeId='^udp$')\n\n# append the protocol templates and get the newly appended stack object using the returned href\nvlan_stack = config_element.Stack.read(ethernet_stack.AppendProtocol(vlan_protocol_template))\nipv4_stack = config_element.Stack.read(vlan_stack.AppendProtocol(ipv4_protocol_template))\nudp_stack = config_element.Stack.read(ipv4_stack.AppendProtocol(udp_protocol_template))\n\n",
    "ixnetwork_restpy.samples.traffic.traffic_over_lags.py": "\"\"\"Demonstrates how to create traffic over a lag\n\nNOTE: due to current limitations either a Lagportlacp or Lagportstaticlag must be added\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# add a source lag with multiple vports\nvports_1 = ixnetwork.Vport.add().add()\nlag_1 = ixnetwork.Lag.add(Name='Lag 1', Vports=vports_1)\nlag_1.ProtocolStack.add().Ethernet.add().Lagportlacp.add()\nassert(len(lag_1.Vports) == 2)\n\n# add a destination lag with multiple vports\nvports_2 = ixnetwork.Vport.add().add()\nlag_2 = ixnetwork.Lag.add(Name='Lag 2', Vports=vports_2)\nlag_2.ProtocolStack.add().Ethernet.add().Lagportlacp.add()\nassert(len(lag_2.Vports) == 2)\n\n# add lags to topologies\nethernet1 = ixnetwork.Topology.add(Ports=lag_1).DeviceGroup.add().Ethernet.add()    \nethernet2 = ixnetwork.Topology.add(Ports=lag_2).DeviceGroup.add().Ethernet.add()    \n\n# create a raw traffic item\ntraffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Lag Traffic Item Sample', TrafficType='raw')\n\n# add the lag objects as endpoints to the traffic item\nendpoint_set = traffic_item.EndpointSet.add(Destinations=lag_2, Sources=lag_1)\nassert (len(endpoint_set.Sources) == 1)\nassert (len(endpoint_set.Destinations) == 1)",
    "ixnetwork_restpy.samples.traffic.traffic_over_protocols.py": "\"\"\"Demonstrates creating a traffic item that uses ipv4 endpoints.\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# create 2 ipv4 endpoints\nipv4_1 = ixnetwork.Topology.add(Vports=ixnetwork.Vport.add()).DeviceGroup.add().Ethernet.add().Ipv4.add(Name='Ipv4 West')\nipv4_2 = ixnetwork.Topology.add(Vports=ixnetwork.Vport.add()).DeviceGroup.add().Ethernet.add().Ipv4.add(Name='Ipv4 East')\n\n# create an ipv4 traffic item\ntraffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Ipv4 Traffic Item Sample', TrafficType='ipv4', TrafficItemType='l2L3')\n\n# create an endpoint set using the ipv4 objects\nendpoint_set = traffic_item.EndpointSet.add(Sources=ipv4_1, Destinations=ipv4_2)\nassert (len(endpoint_set.Sources) == 1)\nassert (len(endpoint_set.Destinations) == 1)\nassert (len(traffic_item.ConfigElement.find().Stack.find(StackTypeId='ipv4')) == 1)\n",
    "ixnetwork_restpy.samples.traffic.traffic_over_vports.py": "\"\"\"Demonstrates creating a raw traffic item over vport endpoints.\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# create two vport objects\nvport_1 = ixnetwork.Vport.add()\nvport_2 = ixnetwork.Vport.add()\n\n# create a raw traffic item\ntraffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Raw Traffic Item Sample', TrafficType='raw', TrafficItemType='l2L3')\n\n# raw traffic endpoints must be Vport.Protocols objects\n# create an endpoint set using the Vport.Protocols objects\nendpoint_set = traffic_item.EndpointSet.add(Sources=vport_1.Protocols.find(), Destinations=vport_2.Protocols.find())\nassert (len(endpoint_set.Sources) == 1)\nassert (len(endpoint_set.Destinations) == 1)\n",
    "ixnetwork_restpy.samples.traffic.traffic_scalable_sources_multicast_receivers.py": "\"\"\"Demonstrates creating a traffic item that uses scalable sources and igmp multicast receivers.\n\n\"\"\"\nfrom ixnetwork_restpy import SessionAssistant\n\n\nsession_assistant = SessionAssistant(IpAddress='127.0.0.1', \n    UserName='admin', Password='admin',\n    LogLevel=SessionAssistant.LOGLEVEL_INFO, \n    ClearConfig=True)\nixnetwork = session_assistant.Ixnetwork\n\n# create 2 igmp endpoints\nipv4_1 = ixnetwork.Topology.add(Vports=ixnetwork.Vport.add()).DeviceGroup.add().Ethernet.add().Ipv4.add()\nigmp_host = ipv4_1.IgmpHost.add(Name='Igmp Host')\nipv4_2 = ixnetwork.Topology.add(Vports=ixnetwork.Vport.add().add().add()).DeviceGroup.add().Ethernet.add().Ipv4.add()\nigmp_querier = ipv4_2.IgmpQuerier.add(Name='Igmp Querier')\n\n# create a scalable sources object to be used in creating traffic\n# arg1=ngpfObjectReference arg2=1 based port index, arg3=portCount, arg4=startingDeviceIndex, arg5=deviceCount\nscalable_sources = [\n\t{\n\t\t'arg1': ipv4_2.href,\n\t\t'arg2': 1,\n\t\t'arg3': 3,\n\t\t'arg4': 1,\n\t\t'arg5': 2\n\t},\n\t{\n\t\t'arg1': ipv4_2.href,\n\t\t'arg2': 1,\n\t\t'arg3': 3,\n\t\t'arg4': 9,\n\t\t'arg5': 2\n\t}\n]\n# create a multicast receiver object to be used in creating traffic\n# arg1=IgmpMcastIPv4GroupList.href, arg2=0 based port index, arg3=0 based host index, arg4=0 based group or prune/join index\nmulticast_receivers = [\n\t{\n\t\t'arg1': igmp_host.IgmpMcastIPv4GroupList.href,\n\t\t'arg2': 0,\n\t\t'arg3': 3,\n\t\t'arg4': 0\n\t},\n\t{\n\t\t'arg1': igmp_host.IgmpMcastIPv4GroupList.href,\n\t\t'arg2': 0,\n\t\t'arg3': 4,\n\t\t'arg4': 0\n\t},\n\t{\n\t\t'arg1': igmp_host.IgmpMcastIPv4GroupList.href,\n\t\t'arg2': 0,\n\t\t'arg3': 6,\n\t\t'arg4': 0\n\t},\n\t{\n\t\t'arg1': igmp_host.IgmpMcastIPv4GroupList.href,\n\t\t'arg2': 0,\n\t\t'arg3': 9,\n\t\t'arg4': 0\n\t}\t\n]\n\n# create a traffic item using the scalable sources and multicast receivers\ntraffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Ipv4 Traffic Item Sample', TrafficType='ipv4', TrafficItemType='l2L3')\nendpoint_set = traffic_item.EndpointSet.add(ScalableSources=scalable_sources, MulticastReceivers=multicast_receivers)\nassert (len(endpoint_set.MulticastReceivers) == 4)\nassert (len(endpoint_set.ScalableSources) == 2)\nassert (len(traffic_item.ConfigElement.find().Stack.find(StackTypeId='ipv4')) == 1)\n"
}