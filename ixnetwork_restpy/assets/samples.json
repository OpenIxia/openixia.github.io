{
    "ixnetwork_restpy.samples.sessions.windows_sessions.py": "\"\"\" Demonstrates standalone IxNetwork Windows GUI session management\n\"\"\"\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n\n# setup the connection information to a standalone windows gui test platform\n# the session will always be defaulted to session id 1\n# the session state is always active\ntest_platform=TestPlatform('127.0.0.1', rest_port=11009, platform='windows')\ntest_platform.Trace = 'request_response'\n\n# get a list of sessions\nfor session in test_platform.Sessions.find():\n\tprint(session)\n\n# add a session and remove the session\nsessions = test_platform.Sessions.add()\nassert(len(sessions) == 1)\nprint(sessions)\nsessions.remove()\n\n# get an invalid session\nsessions = test_platform.Sessions.find(Id=6)\nassert(len(sessions) == 0)\n\n# get a valid session\nsessions = test_platform.Sessions.find(Id=1)\nassert(len(sessions) == 1)", 
    "ixnetwork_restpy.samples.statistics.drill_down.py": "\"\"\"Demonstrates drilling down on an already established statistics view.\r\nThis sample requires a running ixnetwork instance that has traffic being transmitted.\r\n\"\"\"\r\n\r\nfrom time import sleep\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\n\r\n# connect to a test platform, create a session and get the root IxNetwork object\r\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\r\ntest_platform.Trace = 'request_response'\r\nsessions = test_platform.Sessions.find(Id=1)\r\nixnetwork = sessions.Ixnetwork\r\n\r\n# get the view you want to drill down on\r\ncaption = 'Traffic Item Statistics'\r\nview = ixnetwork.Statistics.View.find(Caption=caption)\r\nassert(len(view) == 1)\r\n\r\n# get the drill down node for the view\r\ndrill_down = view.DrillDown.find()\r\n\r\n# prior to getting the drill down options the target row index must be set\r\n# the target row index is the 0 based index of the row that you are interested in drilling down into\r\ndrill_down.TargetRowIndex = 0\r\n\r\n# print the drill down options for the view\r\n# drill down options are dynamic and are based on tracking options selected during traffic item creation\r\nfor drill_down_option in drill_down.AvailableDrillDownOptions:\r\n\tprint(drill_down_option)\r\ndrill_down.TargetDrillDownOption = drill_down.AvailableDrillDownOptions[1]\r\nfor drill_down_filter in drill_down.AvailableTargetRowFilters:\r\n\tprint(drill_down_filter)\r\nif len(drill_down.AvailableTargetRowFilters) > 0:\r\n\tdrill_down.TargetRowFilter = drill_down.AvailableTargetRowFilters[0]\r\n\r\n# perform the drill down operation\r\ndrill_down.DoDrillDown()\r\n\r\n# the drill down operation populates the read only 'User Defined Statistics' view\r\n# get the resulting drill down view\r\nuser_defined_statistics = ixnetwork.Statistics.View.find(Caption='User Defined Statistics')\r\n\r\n# wait for data to become available\r\nattempts = 0\r\nwhile user_defined_statistics.Data.IsReady is False and attempts < 10:\r\n    sleep(1)\r\n    attempts += 1\r\n\r\n# print the column headers\r\nprint(' '.join(user_defined_statistics.Data.ColumnCaptions))\r\n\r\n# print the ingress and egress rows\r\nfor ingress_egress_rows in user_defined_statistics.Data.PageValues:\r\n    for row in ingress_egress_rows:\r\n        print(' '.join(row))", 
    "ixnetwork_restpy.samples.traffic.traffic_over_vports.py": "\"\"\"Demonstrates creating a raw traffic item over vport endpoints.\r\n\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\n# connect to a test platform, create a session and get the root IxNetwork object\r\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009, platform='windows')\r\ntest_platform.Trace = 'request_response'\r\nsessions = test_platform.Sessions.find(Id=1)\r\nixnetwork = sessions.Ixnetwork\r\n\r\n# clear the configuration\r\nixnetwork.NewConfig()\r\n\r\n# create two vport objects\r\nvport_1 = ixnetwork.Vport.add()\r\nvport_2 = ixnetwork.Vport.add()\r\n\r\n# create a raw traffic item\r\ntraffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Raw Traffic Item Sample', TrafficType='raw', TrafficItemType='l2L3')\r\n\r\n# raw traffic endpoints must be Vport.Protocols objects\r\n# create an endpoint set using the Vport.Protocols objects\r\nendpoint_set = traffic_item.EndpointSet.add(Sources=vport_1.Protocols.find(), Destinations=vport_2.Protocols.find())\r\nassert (len(endpoint_set.Sources) == 1)\r\nassert (len(endpoint_set.Destinations) == 1)\r\n", 
    "ixnetwork_restpy.samples.traffic.traffic_scalable_sources_multicast_receivers.py": "\"\"\"Demonstrates creating a traffic item that uses scalable sources and igmp multicast receivers.\r\n\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\n# connect to a test platform, create a session and get the root IxNetwork object\r\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\r\ntest_platform.Trace = 'request_response'\r\nsessions = test_platform.Sessions.find(Id=1)\r\nixnetwork = sessions.Ixnetwork\r\n\r\n# clear the configuration\r\nixnetwork.NewConfig()\r\n\r\n# create 2 igmp endpoints\r\nipv4_1 = ixnetwork.Topology.add(Vports=ixnetwork.Vport.add()).DeviceGroup.add().Ethernet.add().Ipv4.add()\r\nigmp_host = ipv4_1.IgmpHost.add(Name='Igmp Host')\r\nipv4_2 = ixnetwork.Topology.add(Vports=ixnetwork.Vport.add().add().add()).DeviceGroup.add().Ethernet.add().Ipv4.add()\r\nigmp_querier = ipv4_2.IgmpQuerier.add(Name='Igmp Querier')\r\n\r\n# create a scalable sources object to be used in creating traffic\r\n# arg1=ngpfObjectReference arg2=1 based port index, arg3=portCount, arg4=startingDeviceIndex, arg5=deviceCount\r\nscalable_sources = [\r\n\t{\r\n\t\t'arg1': ipv4_2.href,\r\n\t\t'arg2': 1,\r\n\t\t'arg3': 3,\r\n\t\t'arg4': 1,\r\n\t\t'arg5': 2\r\n\t},\r\n\t{\r\n\t\t'arg1': ipv4_2.href,\r\n\t\t'arg2': 1,\r\n\t\t'arg3': 3,\r\n\t\t'arg4': 9,\r\n\t\t'arg5': 2\r\n\t}\r\n]\r\n# create a multicast receiver object to be used in creating traffic\r\n# arg1=IgmpMcastIPv4GroupList.href, arg2=0 based port index, arg3=0 based host index, arg4=0 based group or prune/join index\r\nmulticast_receivers = [\r\n\t{\r\n\t\t'arg1': igmp_host.IgmpMcastIPv4GroupList.href,\r\n\t\t'arg2': 0,\r\n\t\t'arg3': 3,\r\n\t\t'arg4': 0\r\n\t},\r\n\t{\r\n\t\t'arg1': igmp_host.IgmpMcastIPv4GroupList.href,\r\n\t\t'arg2': 0,\r\n\t\t'arg3': 4,\r\n\t\t'arg4': 0\r\n\t},\r\n\t{\r\n\t\t'arg1': igmp_host.IgmpMcastIPv4GroupList.href,\r\n\t\t'arg2': 0,\r\n\t\t'arg3': 6,\r\n\t\t'arg4': 0\r\n\t},\r\n\t{\r\n\t\t'arg1': igmp_host.IgmpMcastIPv4GroupList.href,\r\n\t\t'arg2': 0,\r\n\t\t'arg3': 9,\r\n\t\t'arg4': 0\r\n\t}\t\r\n]\r\n\r\n# create a traffic item using the scalable sources and multicast receivers\r\ntraffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Ipv4 Traffic Item Sample', TrafficType='ipv4', TrafficItemType='l2L3')\r\nendpoint_set = traffic_item.EndpointSet.add(ScalableSources=scalable_sources, MulticastReceivers=multicast_receivers)\r\nassert (len(endpoint_set.MulticastReceivers) == 4)\r\nassert (len(endpoint_set.ScalableSources) == 2)\r\nassert (len(traffic_item.ConfigElement.find().Stack.find(StackTypeId='ipv4')) == 1)\r\n", 
    "ixnetwork_restpy.samples.statistics.traffic_flow.py": "\"\"\"Demonstrates creating a custom traffic flow statistics view\r\nThis sample requires a running ixnetwork instance that has traffic being transmitted.\r\nIt uses all possible port filters, traffic item filters and tracking filters when creating the view.\r\nIt enables all possible statistics.\r\nThe last step prior to getting data should be to enable the view.\r\n\"\"\"\r\n\r\nfrom time import sleep\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\n\r\n# connect to a test platform, create a session and get the root IxNetwork object\r\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\r\ntest_platform.Trace = 'request_response'\r\nsessions = test_platform.Sessions.find(Id=1)\r\nixnetwork = sessions.Ixnetwork\r\n\r\n# remove the view if it already exists\r\ncaption = 'Custom Traffic Flow View'\r\nview = ixnetwork.Statistics.View.find(Caption=caption)\r\nif len(view) == 1:\r\n    view.remove()\r\n\r\n# create the view\r\nview = ixnetwork.Statistics.View.add(Caption=caption, Type='layer23TrafficFlow', Visible=True)\r\n\r\n# set filters\r\ntraffic_flow_filter = view.Layer23TrafficFlowFilter.find()\r\ntraffic_flow_filter.PortFilterIds = view.AvailablePortFilter.find()\r\ntraffic_flow_filter.TrafficItemFilterIds = view.AvailableTrafficItemFilter.find()\r\nfor tracking_filter in view.AvailableTrackingFilter.find():\r\n    traffic_flow_filter.EnumerationFilter.add(SortDirection='ascending', TrackingFilterId=tracking_filter)\r\n\r\n# enable statistics\r\nfor statistic in view.Statistic.find():\r\n    statistic.Enabled = True\r\n\r\n# enable the view\r\nview.Enabled = True\r\n\r\n# wait for data to become available\r\nattempts = 0\r\nwhile view.Data.IsReady is False and attempts < 10:\r\n    sleep(1)\r\n    attempts += 1\r\n\r\n# print the column headers\r\nprint(' '.join(view.Data.ColumnCaptions))\r\n\r\n# print the ingress and egress rows\r\nfor ingress_egress_rows in view.Data.PageValues:\r\n    for row in ingress_egress_rows:\r\n        print(' '.join(row))\r\n", 
    "ixnetwork_restpy.samples.assistants.stat_view_assistant.py": "\"\"\"Demonstrates how to use the StatViewAssist class\r\n\r\nThis sample requires an already loaded configuration with at least 2 connected vports.\r\n\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\nfrom ixnetwork_restpy.assistants.statistics.statviewassistant import StatViewAssistant\r\nfrom ixnetwork_restpy.errors import *\r\n\r\n\r\n# connect to a windows test platform using the default api server rest port\r\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009, platform='windows')\r\n\r\n# use the default session and get the root node of the hierarchy\r\nixnetwork = test_platform.Sessions.find().Ixnetwork\r\n\r\nixnetwork.info('negative test')\r\ntry:\r\n    StatViewAssistant(ixnetwork, 'my test view', Timeout=5)\r\nexcept NotFoundError as e:\r\n    ixnetwork.info(e)\r\n\r\n# get a list of all current statistic views that can be used in the StatViewAssistant\r\nprint(StatViewAssistant.GetViewNames(ixnetwork))\r\n\r\n# create a stat view assistant for a statistics view\r\nport_statistics = StatViewAssistant(ixnetwork, 'Port Statistics')\r\n\r\n# print all the rows for a statistics view\r\nprint(port_statistics)\r\n\r\n# add a filter so that only a single row is retrieved\r\nport_statistics.AddRowFilter('Port Name', StatViewAssistant.REGEX, 'Port 1$')\r\nprint(port_statistics)\r\n\r\n# demonstrate cell access\r\nport_statistics.ClearRowFilters()\r\nrows = port_statistics.Rows\r\n\r\n# get the cell value at row 0, column 'Port Name'\r\nprint(rows[0]['Port Name'])\r\n\r\n# get the cell value at row 1, column 'Stat Name'\r\nprint(rows[1]['Stat Name'])\r\n\r\n# get the cell value at the first row that matches a regex of 'case insensitive endswith port 1', column 'Frames Tx.'\r\nprint(rows['(?i)port 1$']['Frames Tx.'])\r\n\r\nixnetwork.info('check that all ipv4 protocols are up')\r\nprotocols_summary = StatViewAssistant(ixnetwork, 'Protocols Summary')\r\nprotocols_summary.AddRowFilter('Protocol Type', StatViewAssistant.REGEX, '(?i)^ipv4?')\r\nprotocols_summary.CheckCondition('Sessions Not Started', StatViewAssistant.EQUAL, 0)\r\nprotocols_summary.CheckCondition('Sessions Down', StatViewAssistant.EQUAL, 0)\r\n\r\nixnetwork.info('traffic stat check')\r\ntraffic_statistics = StatViewAssistant(ixnetwork, 'Traffic Item Statistics')\r\ntx_frames = traffic_statistics.Rows[0]['Tx Frames']\r\nixnetwork.info('tx frames: %s' % tx_frames)\r\n\r\ntransport.info('drilldown sample')\r\nixnetwork.info(traffic_statistics.DrillDownOptions())\r\nixnetwork.info(traffic_statistics.TargetRowFilters())\r\ndrilldown = traffic_statistics.Drilldown(0, traffic_statistics.DrillDownOptions()[0], traffic_statistics.TargetRowFilters()[0])\r\nprint(drilldown)\r\n", 
    "ixnetwork_restpy.samples.classic.classic_bgp.py": "\"\"\"Demonstrates adding a bgp neighbor range to a virtual port.\r\n\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\n\r\n# connect to a test platform, create a session and get the root IxNetwork object\r\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\r\ntest_platform.Trace = 'none'\r\nsessions = test_platform.Sessions.find(Id=1)\r\nixnetwork = sessions.Ixnetwork\r\n\r\n# clear the configuration\r\nixnetwork.NewConfig()\r\n\r\n# add a virtual port and get the interface object\r\nvport = ixnetwork.Vport.add(Name='Test Port 1')\r\n\r\n# add an interface\r\ninterface = vport.Interface.add(Enabled=True)\r\nipv4 = interface.Ipv4.add(Ip='1.1.1.1', Gateway='1.1.2.1')\r\n\r\n# enable bgp\r\nbgp = vport.Protocols.find().Bgp\r\nbgp.Enabled = True\r\n\r\n# add a bgp neighbor range\r\nneighbor_range = bgp.NeighborRange.add(Interfaces=interface, Enabled=True, EnableBgpId=True)\r\n\r\n# verify the neighbor range has been added on the server\r\nassert(len(neighbor_range.find()) == 1)\r\n", 
    "ixnetwork_restpy.samples.files.file_transfer.py": "\"\"\"Demonstrates how to upload and download files to a remote server.\r\n\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\nfrom ixnetwork_restpy.files import Files\r\n\r\n\r\n# connect to a test platform, create a session and get the root IxNetwork object\r\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\r\ntest_platform.Trace = 'request_response'\r\nsessions = test_platform.Sessions.find(Id=1)\r\nixnetwork = sessions.Ixnetwork\r\n\r\n# create an empty configuration on the server\r\nixnetwork.NewConfig()\r\n\r\n# add 4 vport objects\r\nixnetwork.Vport.add().add().add().add()\r\n\r\n# save the configuration on the server\r\nixnetwork.SaveConfig(Files('sample.ixncfg'))\r\n\r\n# get a list of remote files\r\nprint(sessions.GetFileList())\r\n\r\n# download the remote saved configuration as some other local file\r\nsessions.DownloadFile('sample.ixncfg', 'local.ixncfg')\r\n\r\n# upload the local file\r\nprint(sessions.UploadFile('local.ixncfg'))\r\n\r\n# load the remote local configuration\r\nprint(ixnetwork.LoadConfig(Files('local.ixncfg')))\r\n\r\n# verify that the vport objects exist\r\nassert(len(ixnetwork.Vport.find()) == 4)\r\n\r\n\r\n", 
    "ixnetwork_restpy.samples.ports.clear_ownership.py": "\"\"\"Demonstrates an approach for clearing ownership on vports that are connected \r\nby using the Vport.ConnectedTo reference and obtaining the Port object which has the ClearOwnership method\r\n\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\n\r\n# connect to a test platform, create a session and get the root IxNetwork object\r\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\r\ntest_platform.Trace = 'request_response'\r\nsessions = test_platform.Sessions.find(Id=1)\r\nixnetwork = sessions.Ixnetwork\r\nixnetwork.NewConfig()\r\n\r\n# add a chassis\r\nchassis = ixnetwork.AvailableHardware.Chassis.add(Hostname='10.36.74.17')\r\n\r\n# add abstract ports and connect them to chassis ports\r\ncard = chassis.Card.find(CardId=1)\r\nfor port in card.Port.find():\r\n\tixnetwork.Vport.add(ConnectedTo=port)\r\n\r\n# clear the ownership on the port using a reference returned by the Vport.ConnectedTo property\r\nfor vport in ixnetwork.Vport.find():\r\n\tport = sessions.GetObjectFromHref(vport.ConnectedTo)\r\n\tif port is not None:\r\n\t\tport.ClearOwnership()\r\n\r\n\r\n", 
    "ixnetwork_restpy.samples.traffic.traffic_custom_stack.py": "\"\"\"This sample demonstrates customizing a traffic item stack.\r\n\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\n# connect to a test platform, create a session and get the root IxNetwork object\r\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\r\ntest_platform.Trace = 'none'\r\nsessions = test_platform.Sessions.find(Id=1)\r\nixnetwork = sessions.Ixnetwork\r\n\r\n# clear the configuration\r\nixnetwork.NewConfig()\r\n\r\n# create two vport objects\r\nvport_1 = ixnetwork.Vport.add()\r\nvport_2 = ixnetwork.Vport.add()\r\n\r\n# create a raw traffic item\r\ntraffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Raw Traffic Item Sample', TrafficType='raw', TrafficItemType='l2L3')\r\nendpoint_set = traffic_item.EndpointSet.add(Sources=vport_1.Protocols.find(), Destinations=vport_2.Protocols.find())\r\n\r\n# append protocol templates to the traffic item\r\nconfig_element = traffic_item.ConfigElement.find(EndpointSetId=1)\r\nethernet_stack = config_element.Stack.find(StackTypeId='^ethernet$')\r\n\r\n# get the protocol templates to be appended\r\nvlan_protocol_template = ixnetwork.Traffic.ProtocolTemplate.find(StackTypeId='^vlan$')\r\nipv4_protocol_template = ixnetwork.Traffic.ProtocolTemplate.find(StackTypeId='^ipv4$')\r\nudp_protocol_template = ixnetwork.Traffic.ProtocolTemplate.find(StackTypeId='^udp$')\r\n\r\n# append the protocol templates and get the newly appended stack object using the returned href\r\nvlan_stack = config_element.Stack.read(ethernet_stack.AppendProtocol(vlan_protocol_template))\r\nipv4_stack = config_element.Stack.read(vlan_stack.AppendProtocol(ipv4_protocol_template))\r\nudp_stack = config_element.Stack.read(ipv4_stack.AppendProtocol(udp_protocol_template))\r\n\r\n", 
    "ixnetwork_restpy.samples.classic.classic_interfaces.py": "\"\"\"Demonstrates adding interfaces to virtual ports.\r\n\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\n# connect to a test platform, create a session and get the root IxNetwork object\r\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\r\ntest_platform.Trace = 'none'\r\nsessions = test_platform.Sessions.find(Id=1)\r\nixnetwork = sessions.Ixnetwork\r\n\r\n# clear the configuration\r\nixnetwork.NewConfig()\r\n\r\n# add a virtual port and get the interface object\r\ninterfaces = ixnetwork.Vport.add(Name='Test Port 1').Interface\r\n\r\n# add 10 interfaces\r\nfor i in range(1, 11):\r\n\tinterfaces.add(Description='Interface Demo %s' % i, Enabled=True)\r\n\r\n# verify they have been added on the server\r\nassert(len(interfaces.find()) == 10)\r\n", 
    "ixnetwork_restpy.samples.sessions.connection_manager.py": "\"\"\" Demonstrates IxNetwork Connection Manager session management\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\n\r\n# setup the connection information for a connection manager test platform \r\ntest_platform=TestPlatform('10.113.9.116', rest_port=443, platform='connection_manager')\r\ntest_platform.Trace = 'request_response'\r\n\r\n# get a list of sessions\r\nfor session in test_platform.Sessions.find():\r\n    print(session)\r\n\r\n# add a session and remove the session\r\nsessions = test_platform.Sessions.add()\r\nassert(len(sessions) == 1)\r\nprint(sessions)\r\nsessions.remove()\r\n\r\n# get an invalid session\r\nsessions = test_platform.Sessions.find(Id=6)\r\nassert(len(sessions) == 0)\r\n\r\n# get a valid session, start it and remove it when finished\r\n# use the state to determine if it can be stopped\r\nsessions = test_platform.Sessions.find(Id=8022)\r\nassert(len(sessions) == 1)\r\nif sessions.State == 'STOPPED':\r\n    sessions.Start()\r\n    sessions.remove()\r\n", 
    "ixnetwork_restpy.samples.sanity.py": "\"\"\"Sanity script that exercises all major points in the IxNetwork REST API\n- sessions\n- properties returning objects\n- methods returning objects\n- tracing\n- authentication\n- file transfer\n- execs\n- multivalues\n- multivalue steps\n\"\"\"\nimport sys\nimport os\nimport json\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\nfrom ixnetwork_restpy.errors import IxNetworkError\nfrom ixnetwork_restpy.files import Files\n\nsessions = None\n\ntry:\n    test_platform = TestPlatform('127.0.0.1')\n    test_platform.Trace = 'request_response'\n    test_platform.Authenticate('admin', 'admin')\n    print(test_platform)\n\n    sessions = test_platform.Sessions.add()\n    print(sessions)\n\n    ixnetwork = sessions.Ixnetwork\n    print(ixnetwork)\n\n    views = ixnetwork.Statistics.View.find()\n    print(views)\n\n    try:\n        ixnetwork.LoadConfig('c:/temp/ipv4_traffic.ixncfg')\n        assert ('Type checking failed')\n    except TypeError as e:\n        print(e)\n    ixnetwork.LoadConfig(Files('c:/users/anbalogh/downloads/ipv4_traffic.ixncfg', local_file=True))\n\n    print(ixnetwork.Globals)\n    print(ixnetwork.AvailableHardware)\n    print(ixnetwork.Traffic)\n    print(ixnetwork.Statistics)\n    print(ixnetwork.ResourceManager)\n    ixnetwork.NewConfig()\n    \n    assert(len(ixnetwork.Vport.find()) == 0)\n    assert(len(ixnetwork.Topology.find()) == 0)\n    assert(len(ixnetwork.AvailableHardware.Chassis.find()) == 0)\n    assert(len(ixnetwork.Statistics.View.find()) == 0)\n    assert(len(ixnetwork.Traffic.TrafficItem.find()) == 0)\n\n    vport_name = 'Abstract Port 1'\n    vports = ixnetwork.Vport.add(Name=vport_name, Type='pos')\n    assert (vports.Type == 'pos')\n    assert (vports.Name == vport_name)\n    vports.Type = 'ethernet'\n    assert (vports.Type == 'ethernet')\n    vports.refresh()\n    vports.add(Name='Abstract Port 2')\n    vports.add(Name='Abstract Port 3')\n    assert(len(vports) == 3)\n    vports.remove()\n    assert(len(vports) == 0)\n\n    # create 2 ports\n    vports.add().add()\n\n    # create a raw traffic item\n    traffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Raw Traffic Item Test', TrafficType='raw', TrafficItemType='l2L3')\n    protocols = vports.Protocols.find()\n    assert (len(protocols) == 2)\n    protocols.refresh()\n    assert (len(protocols) == 2)\n    endpoint_set = traffic_item.EndpointSet.add(Sources=protocols)\n    assert (len(endpoint_set.Sources) == 2)\n    mpls_protocol_template = ixnetwork.Traffic.ProtocolTemplate.find(StackTypeId='^mpls$')\n    ethernet_stack = traffic_item.ConfigElement.find()[0].Stack.find(StackTypeId='^ethernet$')\n    append_result = ethernet_stack.Append(mpls_protocol_template)\n\n    # create a topology\n    topology = ixnetwork.Topology.add(Name='Topology 1', Ports=vports)\n    assert(len(topology) == 1)\n\n    # create a device group\n    device_group = topology.DeviceGroup.add(Name='Device 1', Multiplier='7')\n    assert(len(device_group) == 1)\n    device_group.Enabled.Alternate('False')\n    assert (device_group.Enabled == 'Alt: False')\n    \n    # create and print ethernet information\n    ethernet = device_group.Ethernet.add()\n    assert(len(ethernet) == 1)\n\n    # get multivalue information\n    # # outputs format, count, possible patterns etc\n    print(ethernet.Mac.Info)\n\n    # multivalue steps\n    steps = ethernet.Mac.Steps()\n    for step in steps:\n        print(step)\n        step.Enabled = False\n        step.refresh()\n        assert (step.Enabled is False)\n        \n    # update multivalue on server immediately\n    ethernet.Mac.Decrement(start_value='00:00:de:ad:be:ef', step_value='00:00:fa:ce:fa:ce')\n    assert (ethernet.Mac == 'Dec: 00:00:de:ad:be:ef, 00:00:fa:ce:fa:ce')\n    ethernet.Mac.Increment(start_value='00:00:fa:ce:fa:ce', step_value='00:00:de:ad:be:ef')\n    assert (ethernet.Mac == 'Inc: 00:00:fa:ce:fa:ce, 00:00:de:ad:be:ef')\n    ethernet.Mac.Random()\n    assert (ethernet.Mac == 'Rand')\n    ethernet.Mac.RandomRange()\n    assert (ethernet.Mac.Pattern.startswith('Randr:'))\n    ethernet.Mac.RandomMask()\n    assert (ethernet.Mac.Pattern.startswith('Randb:'))\n    ethernet.Mac.Distributed(algorithm='autoEven', mode='perPort', values=[('00:00:fa:ce:fa:ce', 60), ('0:00:de:ad:be:ef', 40)])\n    assert (ethernet.Mac.Pattern.startswith('Dist:'))\n    ethernet.Mac.ValueList(values=['00:00:fa:ce:fa:ce', '00:00:de:ad:be:ef'])\n    assert (ethernet.Mac.Pattern.startswith('List:'))\n    ethernet.Mac.Custom(start_value='00:00:fa:ce:fa:ce', step_value='00:00:de:ad:be:ef', increments=[('00:00:ab:ab:ab:ab', 6, [('00:00:01:01:01:01', 2, None)])])\n    assert (ethernet.Mac.Pattern.startswith('Custom:'))\n    print(ethernet.Mac.Values)\n    \n    ipv4 = ethernet.Ipv4.add(Name='Ipv4 1')\n    print(ipv4)\n    ipv4.Address.Increment(start_value='1.1.1.1', step_value='0.1.1.1')\n    assert(ipv4.Address == 'Inc: 1.1.1.1, 0.1.1.1')\n    \n    bgp4 = ipv4.BgpIpv4Peer.add(Name='Bgp 1')\n    bgp4.Md5Key.String('my-md5-key-{Dec: 1,1}')\n    print(bgp4)\n\n    # release all vports\n    ixnetwork.Vport.find().ReleasePort()\n\n    # add bgp6 in one line\n    bgp6 = topology.DeviceGroup.add(Name='Device 2').Ethernet.add().Ipv6.add().BgpIpv6Peer.add()\n    print(bgp6)\n\n    # add one quick flow group per vport\n    vports = ixnetwork.Vport.find()\n    vports.AddQuickFlowGroups(1)\n    \n    # number of quick flow groups should equal the number of vports\n    traffic_items = ixnetwork.Traffic.TrafficItem.find()\n    high_level_streams = traffic_items.HighLevelStream.find()\n\n    # errors = ixnetwork.Globals.AppErrors()[0].Error(Name='JSON Import Errors')\n    # for instance in errors[0].Instance():\n    # \tprint(instance)\n\n    # chassis = ixnetwork.AvailableHardware.add_Chassis(Hostname='10.36.24.55')\nexcept IxNetworkError as e:\n    print(e)\n\nif sessions is not None:\n    sessions.remove()\n\n\n", 
    "ixnetwork_restpy.samples.object_from_obj_ref.py": "\"\"\"Demonstrates how to get an object given an href\r\n\r\nThe TestPlatform.Sessions class has a helper method that assists in returning an object given a valid href\r\n\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\r\ntest_platform.Trace = 'request_response'\r\n\r\nsessions = test_platform.Sessions.add()\r\n\r\nixnetwork = sessions.Ixnetwork\r\nixnetwork.NewConfig()\r\n\r\nvport = ixnetwork.Vport.add()\r\n\r\n# the following code is an attempt to get the object that the vport is connected to\r\n# in this case the href that is returned from the .ConnectedTo property is null so the object returned is None\r\n# if the vport was connected to an actual hardware port a valid /availableHardware/chassis/card/port object reference \r\n# would be returned from the Vport.ConnectedTo property\r\n# this reference is then used to get an actual object\r\nhardware_port = sessions.GetObjectFromHref(vport.ConnectedTo)\r\nassert(hardware_port is None)", 
    "ixnetwork_restpy.samples.ngpf_device_ids.py": "\"\"\"Demonstrates some best practices for specifying device ids when executing ngpf operations\r\n\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\n\r\n# connect to a test platform, create a session and get the root IxNetwork object\r\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\r\ntest_platform.Trace = 'request_response'\r\nsessions = test_platform.Sessions.find(Id=1)\r\nixnetwork = sessions.Ixnetwork\r\nixnetwork.NewConfig()\r\n\r\n# create a b2b ngpf scenario\r\nvport_1 = ixnetwork.Vport.add().add().add()\r\nprint(vport_1)\r\nvport_2 = ixnetwork.Vport.add()\r\ntopologies = ixnetwork.Topology.add(Vports=vport_1).add(Vports=vport_2)\r\nipv4_1 = topologies[0].DeviceGroup.add().Ethernet.add().Ipv4.add()\r\nigmp_host = ipv4_1.IgmpHost.add()\r\nipv4_2 = topologies[1].DeviceGroup.add().Ethernet.add().Ipv4.add()\r\nigmp_querier = ipv4_2.IgmpQuerier.add()\r\n\r\n# set the port step on the address\r\naddress = ipv4_1.Address\r\nprint(address.Steps)\r\naddress.Steps.Step = '1.1.1.1'\r\nassert(address.Steps.Step == '1.1.1.1')\r\n\r\n# get device ids for two specific ip addresses\r\nipv4_device_ids = ipv4_1.get_device_ids(Address='^(%s|%s)' % (ipv4_1.Address.Values[6], ipv4_1.Address.Values[24]))\r\nassert(len(ipv4_device_ids) == 2)\r\n\r\n# get device ids on two specific ports\r\nport_device_ids = ipv4_1.get_device_ids(PortNames='^(%s|%s)$' % (vport_1[0].Name, vport_1[2].Name))\r\nassert(len(port_device_ids) == 20)\r\n\r\n# get device ids for igmp v2 hosts on a specific port\r\nv2_device_ids = igmp_host.get_device_ids(PortNames='(?i)^%s$' % (vport_1[1].Name), VersionType='(?i)version2')\r\nassert(len(v2_device_ids) == 10)\r\n\r\n# stop all devices\r\nipv4_1.Stop()\r\n\r\n# start only a few devices\r\nipv4_1.Start(ipv4_device_ids)\r\n\r\n# leave\r\nigmp_host.IgmpMcastIPv4GroupList.IgmpLeaveGroup(\"1-4;6\")\r\n\r\n# issue a join on only a few devices\r\nigmp_host.IgmpMcastIPv4GroupList.Join(v2_device_ids)\r\n\r\n\r\n\r\n\r\n", 
    "ixnetwork_restpy.samples.ngpf_ipv4.py": "\"\"\"Sanity script\r\n\"\"\"\r\nimport sys\r\nimport os\r\nimport json\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\nfrom ixnetwork_restpy.errors import IxNetworkError\r\nfrom ixnetwork_restpy.files import Files\r\n\r\nsessions = None\r\n\r\ntry:\r\n    # test_platform = TestPlatform('10.36.78.53', platform='linux')\r\n    test_platform = TestPlatform('127.0.0.1', rest_port=11009, platform='windows')\r\n    test_platform.Trace = 'request_response'\r\n    test_platform.Authenticate('admin', 'admin')\r\n    print(test_platform)\r\n\r\n    sessions = test_platform.Sessions.add()\r\n    print(sessions)\r\n\r\n    ixnetwork = sessions.Ixnetwork\r\n    print(ixnetwork)\r\n    ixnetwork.NewConfig()\r\n\r\n    # create 2 ports\r\n    vports = ixnetwork.Vport.add().add()\r\n\r\n    # create a topology\r\n    topology = ixnetwork.Topology.add(Name='Topology 1', Ports=vports)\r\n    assert(len(topology) == 1)\r\n\r\n    # create a device group\r\n    device_group = topology.DeviceGroup.add(Name='Device 1', Multiplier='7')\r\n    assert(len(device_group) == 1)\r\n    device_group.Enabled.Alternate('False')\r\n    assert (device_group.Enabled == 'Alt: False')\r\n    \r\n    # create and print ethernet information\r\n    ethernet = device_group.Ethernet.add()\r\n    assert(len(ethernet) == 1)\r\n\r\n    # update multivalue on server immediately\r\n    ethernet.Mac.Decrement(start_value='00:00:de:ad:be:ef', step_value='00:00:fa:ce:fa:ce')\r\n    assert (ethernet.Mac == 'Dec: 00:00:de:ad:be:ef, 00:00:fa:ce:fa:ce')\r\n    ethernet.Mac.Increment(start_value='00:00:fa:ce:fa:ce', step_value='00:00:de:ad:be:ef')\r\n    assert (ethernet.Mac == 'Inc: 00:00:fa:ce:fa:ce, 00:00:de:ad:be:ef')\r\n    ethernet.Mac.Random()\r\n    assert (ethernet.Mac == 'Rand')\r\n    ethernet.Mac.RandomRange()\r\n    assert (ethernet.Mac.Pattern.startswith('Randr:'))\r\n    ethernet.Mac.RandomMask()\r\n    assert (ethernet.Mac.Pattern.startswith('Randb:'))\r\n    ethernet.Mac.Distributed(algorithm='autoEven', mode='perPort', values=[('00:00:fa:ce:fa:ce', 60), ('0:00:de:ad:be:ef', 40)])\r\n    assert (ethernet.Mac.Pattern.startswith('Dist:'))\r\n    ethernet.Mac.ValueList(values=['00:00:fa:ce:fa:ce', '00:00:de:ad:be:ef'])\r\n    assert (ethernet.Mac.Pattern.startswith('List:'))\r\n    ethernet.Mac.Custom(start_value='00:00:fa:ce:fa:ce', step_value='00:00:de:ad:be:ef', increments=[('00:00:ab:ab:ab:ab', 6, [('00:00:01:01:01:01', 2, None)])])\r\n    assert (ethernet.Mac.Pattern.startswith('Custom:'))\r\n    print(ethernet.Mac.Values)\r\n    \r\n    ipv4 = ethernet.Ipv4.add(Name='Ipv4 1')\r\n    print(ipv4)\r\n    ipv4.Address.ValueList(['1.1.1.1', '1.1.1.2'])\r\n    assert(ipv4.Address.Pattern.startswith('List:'))\r\n    ipv4.Address.Increment(start_value='1.1.1.1', step_value='0.1.1.1')\r\n    assert(ipv4.Address == 'Inc: 1.1.1.1, 0.1.1.1')\r\n    \r\n    ipv4.Start()\r\n    \r\nexcept IxNetworkError as e:\r\n    print(e)\r\n\r\nif sessions is not None:\r\n    sessions.remove()\r\n\r\n\r\n", 
    "ixnetwork_restpy.samples.restapi_logging.py": "\nimport sys\nimport os\nsys.path[0] = os.path.abspath(sys.path[0] + '\\\\..\\\\..\\\\')\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n# default output is to the sys.stdout\n# to output to a log file, use the log_file_name param\n# default tracing is 'none' which is no tracing of request and response messages\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009, log_file_name='test.log')\nsessions = test_platform.Sessions.add()\n\n# trace requests\n# the next add vport should show a debug message for the request\nprint('LOG REQUEST ONLY')\ntest_platform.Trace='request'\nsessions.Ixnetwork.Vport.add()\n\n# trace requests and responses\n# the next add vport should show debug messages for the request and response\nprint('LOG REQUEST AND RESPONSES')\ntest_platform.Trace='request_response'\nsessions.Ixnetwork.Vport.add()\n\n# turn off tracing\n# the next add vport should not show debug messages for the request and response\nprint('LOG NOTHING')\ntest_platform.Trace='none'\nsessions.Ixnetwork.Vport.add()\n", 
    "ixnetwork_restpy.samples.files.save_load_config.py": "\"\"\"Demonstrates file handling.\r\n\r\nThe Files object determines how file content is uploaded.\r\nPrior to an operation if local_file=True is specified the content will be pushed to the server \r\nif the content exists locally.\r\nIf the file does not exist locally an empty file using only the file name will be created on the server. \r\n\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\nfrom ixnetwork_restpy.files import Files\r\n\r\n\r\n# connect to a test platform, create a session and get the root IxNetwork object\r\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\r\ntest_platform.Trace = 'request_response'\r\nsessions = test_platform.Sessions.find(Id=1)\r\nixnetwork = sessions.Ixnetwork\r\n\r\n# create an empty configuration on the server\r\nixnetwork.NewConfig()\r\n\r\n# add 4 vport objects\r\nixnetwork.Vport.add().add().add().add()\r\n\r\n# save the configuration on the server\r\nixnetwork.SaveConfig(Files('sample.ixncfg'))\r\n\r\n# create an empty configuration\r\nixnetwork.NewConfig()\r\nassert(len(ixnetwork.Vport.find()) == 0)\r\n\r\n# load the saved configuration\r\nixnetwork.LoadConfig(Files('sample.ixncfg'))\r\n\r\n# verify that the vport objects exist\r\nassert(len(ixnetwork.Vport.find()) == 4)\r\n\r\n\r\n", 
    "ixnetwork_restpy.samples.iterators.py": "\"\"\"Demonstrates ixnetwork_restpy container object functionality.\r\n\r\nThe sample below shows how to retrieve all instances of a node from the server into a single container object\r\nEach instance can be accessed using the container object's iterator or index functionality\r\nThe container implements the following special method names to allow for iteration and indexing:\r\n    __len__, __getitem__, __iter__, __next__\r\n\r\nThe benefit of a container object is that a single method call can act on many instances without having to pass arrays of references.\r\nFor example if a container encapsulates 10 instances, the <container>.remove() method will delete all the encapsulated \r\ninstances without having to add looping code\r\n\r\nFor more information on containers read the following:  \r\n  https://docs.python.org/2.7/reference/datamodel.html#emulating-container-types\r\n  https://docs.python.org/2.7/library/stdtypes.html#typeiter\r\n\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\n\r\n# connect to a test platform\r\ntest_platform = TestPlatform('127.0.0.1')\r\n\r\n# use the default session and get the root node of the hierarchy\r\nixnetwork = test_platform.Sessions.find().Ixnetwork\r\n\r\n# clear the configuration\r\nixnetwork.NewConfig()\r\n\r\n# create x number of vports\r\nvport_count = 3\r\nfor i in range(vport_count):\r\n    ixnetwork.Vport.add()\r\n\r\n# get a container object with all instances\r\nvports = ixnetwork.Vport.find()\r\nassert(len(vports) == 3)\r\n\r\n# print the number of insances encapsulated in the container\r\nprint('%s instances' % len(vports))\r\n\r\n# print all instances in the container\r\nprint(vports)\r\n\r\n# print the first instance\r\nprint(vports[0].href)\r\n\r\n# print the last instance\r\nprint(vports[-1].href)\r\n\r\n# convert the container object into a list\r\nvport_list = list(vports)\r\nprint(len(vport_list))\r\n\r\n# remove all encapsulated instances in a single method call\r\nvports.remove()\r\n\r\n\r\n", 
    "ixnetwork_restpy.samples.multivalues.py": "\"\"\"Demonstrates different types of patterns that can be set in\r\n\tTestPlatform.Sessions.IxNetwork.Topology...Multivalue objects\r\n\r\n\"\"\"\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\n\r\n# connect to a test tool platform\r\ntest_platform = TestPlatform('127.0.0.1')\r\n\r\n# use the default session and get the root node of the hierarhcy\r\nixnetwork = test_platform.Sessions.find().Ixnetwork\r\n\r\n# clear any configuration that may be present\r\nixnetwork.NewConfig()\r\n\r\n# add virtual ports\r\nvports = ixnetwork.Vport.add().add().add().add()\r\nvports.info(vports)\r\n\r\n# add ipv4 devices\r\nipv4 = ixnetwork.Topology.add(Ports=vports).DeviceGroup.add(Multiplier=10).Ethernet.add().Ipv4.add()\r\n\r\n# set single multivalue\r\nipv4.Address.Single('6.6.6.6')\r\nipv4.info(ipv4.Address)\r\nassert(ipv4.Address.Pattern == '6.6.6.6')\r\n\r\n# set increment multivalue\r\nipv4.Address.Increment(start_value='7.7.7.7', step_value='8.8.8.8')\r\nipv4.info(ipv4.Address)\r\nassert(ipv4.Address.Pattern.startswith('Inc:') is True)\r\n\r\n# set decrement multivalue\r\nipv4.Address.Decrement(start_value='6.6.6.6', step_value='5.5.5.5')\r\nipv4.info(ipv4.Address)\r\nassert(ipv4.Address.Pattern.startswith('Dec:') is True)\r\n\r\n# set custom multivalue\r\nipv4.Address.Custom(start_value='6.6.6.6', step_value='5.5.5.5', increments=[('3.3.3.3', 12, [('2.2.2.2', 20, [])])])\r\nipv4.info(ipv4.Address)\r\nassert(ipv4.Address.Pattern.startswith('Custom:') is True)\r\n\r\n# set valuelist multivalue\r\nipv4.Address.ValueList(['10.10.10.10', '11.11.11.11'])\r\nipv4.info(ipv4.Address)\r\nassert(ipv4.Address.Pattern.startswith('List:') is True)\r\n\r\n# set random multivalue\r\nipv4.Address.Random()\r\nipv4.info(ipv4.Address)\r\nassert(ipv4.Address.Pattern.startswith('Rand') is True)\r\n\r\n# set repeatable random range multivalue\r\nipv4.Address.RandomRange(min_value='1.1.1.1', max_value='2.2.2.2', step_value='0.0.0.1', seed=7)\r\nipv4.info(ipv4.Address)\r\nassert(ipv4.Address.Pattern.startswith('Randr:') is True)\r\n\r\n# set repeatable random multivalue\r\nipv4.Address.RandomMask(fixed_value='1.1.1.1', mask_value='0.0.0.1', seed=7, count=6)\r\nipv4.info(ipv4.Address)\r\nassert(ipv4.Address.Pattern.startswith('Randb:') is True)\r\n", 
    "ixnetwork_restpy.samples.getting_started.py": "\"\"\"A simple script that demonstrates how to get started with ixnetwork_restpy scripting.\r\n\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\n\r\n# connect to a windows test platform using the default api server rest port\r\ntest_platform = TestPlatform('127.0.0.1')\r\n\r\n# use the default session and get the root node of the hierarhcy\r\nixnetwork = test_platform.Sessions.find().Ixnetwork\r\n\r\n# clear any configuration that may be present\r\nixnetwork.NewConfig()\r\n\r\n# add a virtual port\r\nvport = ixnetwork.Vport.add(Name='Abstract Test Port 1')\r\n\r\n# add 10 ipv4 devices\r\nipv4_devices = ixnetwork.Topology.add(Ports=vport).DeviceGroup.add(Multiplier=10).Ethernet.add().Ipv4.add()\r\n", 
    "ixnetwork_restpy.samples.resource_manager.py": "\"\"\"Demonstrates some best practices for using resource manager to import and export the configuration as json\r\n\r\n\"\"\"\r\n\r\nimport json\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\nfrom ixnetwork_restpy.files import Files\r\n\r\n\r\n# connect to a test platform, create a session and get the root IxNetwork object\r\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\r\ntest_platform.Trace = 'request_response'\r\nsessions = test_platform.Sessions.find(Id=1)\r\nixnetwork = sessions.Ixnetwork\r\n\r\n# create a configuration fragment of two virtual ports\r\nvports = [\r\n    {\r\n        'xpath': '/vport[1]',\r\n        'name': 'vport 1'\r\n    },\r\n    {\r\n        'xpath': '/vport[2]',\r\n        'name': 'vport 2'\r\n    }\r\n]\r\n\r\n# import the configuration fragment as a string\r\nixnetwork.ResourceManager.ImportConfig(json.dumps(vports), True)\r\nassert(len(ixnetwork.Vport.find()) == 2)\r\n\r\n# export the entire configuration as a string\r\nconfig = ixnetwork.ResourceManager.ExportConfig(['/descendant-or-self::*'], False, 'json')\r\n\r\n# import the entire configuration as a string\r\nixnetwork.ResourceManager.ImportConfig(config, True)\r\nassert(len(ixnetwork.Vport.find()) == 2)\r\n\r\n# export the entire configuration as a file\r\nixnetwork.ResourceManager.ExportConfigFile(['/descendant-or-self::*'], False, 'json', Files('two_vports.json'))\r\n\r\n# import then entire configuration from a file\r\nixnetwork.ResourceManager.ImportConfigFile(Files('two_vports.json'), True)\r\nassert(len(ixnetwork.Vport.find()) == 2)\r\n", 
    "ixnetwork_restpy.samples.ports.assign_ports.py": "\"\"\"Demonstrates the best practice for connecting vport(s) to hardware test ports.\n\nAssignPorts is currently the optimal method for connecting hardware test ports to vport(s).\n\nThe AssignPorts method on the test platform does the following:\n\t- adds chassis to /availableHardware using Arg1\n\t- creates abstract ports if the abstract port list (Arg3) cannot meet the number of Arg1 test ports\n\t- clears ownership of test ports if Arg4 is True\n\t- waits until port statistic view for all test ports are ready\n\t- returns a list of abstract test ports that have not been connected to test ports\n\"\"\"\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n\n# connect to a test platform, create a session and get the root IxNetwork object\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\ntest_platform.Trace = 'request_response'\nsessions = test_platform.Sessions.find(Id=1)\nixnetwork = sessions.Ixnetwork\nixnetwork.NewConfig()\n\n# add abstract ports\nvports = ixnetwork.Vport.find()\nfor i in range(2):\n\tvports.add(Name='Abstract Port %s' % i)\nprint(vports)\n\n# connect the abstract ports to test ports\nchassis_ip = '10.36.24.55'\ntest_ports = [\n\tdict(Arg1=chassis_ip, Arg2=1, Arg3=1),\n\tdict(Arg1=chassis_ip, Arg2=1, Arg3=2)\n]\nunconnected_ports = ixnetwork.AssignPorts(test_ports, [], vports, True)\n\n", 
    "ixnetwork_restpy.samples.traffic.traffic_over_protocols.py": "\"\"\"Demonstrates creating a traffic item that uses ipv4 endpoints.\r\n\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\n# connect to a test platform, create a session and get the root IxNetwork object\r\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\r\ntest_platform.Trace = 'request_response'\r\nsessions = test_platform.Sessions.find(Id=1)\r\nixnetwork = sessions.Ixnetwork\r\n\r\n# clear the configuration\r\nixnetwork.NewConfig()\r\n\r\n# create 2 ipv4 endpoints\r\nipv4_1 = ixnetwork.Topology.add(Vports=ixnetwork.Vport.add()).DeviceGroup.add().Ethernet.add().Ipv4.add(Name='Ipv4 West')\r\nipv4_2 = ixnetwork.Topology.add(Vports=ixnetwork.Vport.add()).DeviceGroup.add().Ethernet.add().Ipv4.add(Name='Ipv4 East')\r\n\r\n# create an ipv4 traffic item\r\ntraffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Ipv4 Traffic Item Sample', TrafficType='ipv4', TrafficItemType='l2L3')\r\n\r\n# create an endpoint set using the ipv4 objects\r\nendpoint_set = traffic_item.EndpointSet.add(Sources=ipv4_1, Destinations=ipv4_2)\r\nassert (len(endpoint_set.Sources) == 1)\r\nassert (len(endpoint_set.Destinations) == 1)\r\nassert (len(traffic_item.ConfigElement.find().Stack.find(StackTypeId='ipv4')) == 1)\r\n", 
    "ixnetwork_restpy.samples.traffic.traffic_over_lags.py": "\"\"\"Demonstrates how to create traffic over a lag\r\n\r\nNOTE: due to current limitations either a Lagportlacp or Lagportstaticlag must be added\r\n\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\r\ntest_platform.Trace = 'request_response'\r\n\r\nsessions = test_platform.Sessions.add()\r\n\r\nixnetwork = sessions.Ixnetwork\r\nixnetwork.NewConfig()\r\n\r\n# add a source lag with multiple vports\r\nvports_1 = ixnetwork.Vport.add().add()\r\nlag_1 = ixnetwork.Lag.add(Name='Lag 1', Vports=vports_1)\r\nlag_1.ProtocolStack.add().Ethernet.add().Lagportlacp.add()\r\nassert(len(lag_1.Vports) == 2)\r\n\r\n# add a destination lag with multiple vports\r\nvports_2 = ixnetwork.Vport.add().add()\r\nlag_2 = ixnetwork.Lag.add(Name='Lag 2', Vports=vports_2)\r\nlag_2.ProtocolStack.add().Ethernet.add().Lagportlacp.add()\r\nassert(len(lag_2.Vports) == 2)\r\n\r\n# create a raw traffic item\r\ntraffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Lag Traffic Item Sample', TrafficType='raw')\r\n\r\n# add the lag objects as endpoints to the traffic item\r\nendpoint_set = traffic_item.EndpointSet.add(Destinations=lag_2, Sources=lag_1)\r\nassert (len(endpoint_set.Sources) == 1)\r\nassert (len(endpoint_set.Destinations) == 1)", 
    "ixnetwork_restpy.samples.sessions.linux_sessions.py": "\"\"\" Demonstrates IxNetwork Linux API Server session management\r\n\"\"\"\r\n\r\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\r\n\r\n\r\n# setup the connection information for a windows gui test platform that has a default session of 1\r\n# platform='linux' forces the scheme to https\r\n# if the default platform='windows' is used a ConnectionError will be raised\r\n# as the Linux API Server does not redirect but closes the connection\r\ntest_platform=TestPlatform('10.36.74.17', platform='linux')\r\ntest_platform.Trace = 'request_response'\r\n\r\n# authenticate with username and password\r\ntest_platform.Authenticate('admin', 'admin')\r\napi_key = test_platform.ApiKey\r\n\r\n# if username/password is not acceptable to the client due to the unencrypted password\r\n# an api key can be specified instead\r\n# the api key can be retrieved from the linux api server user settings and provided \r\n# to the TestPlatform.ApiKey property which will be used in subsequent server requests\r\ntest_platform.ApiKey = api_key\r\n\r\n# get a list of sessions\r\nfor session in test_platform.Sessions.find():\r\n    print(session)\r\n\r\n# add a session\r\nsessions = test_platform.Sessions.add()\r\nsession_id = sessions.Id\r\nprint(sessions)\r\n\r\n# remove the session\r\nsessions.remove()\r\nassert (len(sessions) == 0)\r\n\r\n# attempt to get the removed session\r\nsessions = test_platform.Sessions.find(session_id)\r\nassert(len(sessions) == 0)\r\n"
}